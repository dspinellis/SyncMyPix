/* The following code was generated by JFlex 1.4.3 on 25/02/12 21:15 */

/**
 * JFlex specification for transcribing Greek characters into latin
 * according to ISO 843:1997.
 *
 *    GreekTranscribe.java is part of SyncMyPix
 *
 *    Author: Diomidis Spinellis <dds@aueb.gr>
 *
 *	  Copyright (c) 2012 Diomidis Spinellis
 *
 *    SyncMyPix is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    SyncMyPix is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with SyncMyPix.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Convert this file into Java using a sequence line the following
 * grconv -S UTF-8 -T Java greek-transcribe.lex >foo.lex
 * jflex foo.lex
 *
 * See also
 * http://www.spinellis.gr/sw/greek/grconv/
 * http://jflex.de/faq.html
 * http://transliteration.eki.ee/pdf/Greek.pdf
 */

package gr.spinellis.greek;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException ;

/**
 * Transcribe Greek input per ISO 843:1997 part 2
 */

public class GreekTranscribe {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\u037b\0\1\10\1\0\1\32\1\40\1\40\1\0\1\1"+
    "\1\0\1\14\1\1\1\37\1\7\1\16\1\20\1\26\1\30\1\34"+
    "\1\36\1\41\1\45\1\50\1\52\1\54\1\60\1\22\1\62\1\56"+
    "\1\64\1\0\1\67\1\71\1\12\1\76\1\24\1\4\1\100\1\46"+
    "\1\74\1\6\1\31\1\37\1\37\1\73\1\5\1\15\1\17\1\25"+
    "\1\27\1\33\1\35\1\42\1\43\1\47\1\51\1\53\1\57\1\21"+
    "\1\61\1\55\1\63\1\66\1\65\1\70\1\11\1\75\1\23\1\2"+
    "\1\77\1\44\1\72\1\3\1\13\1\3\ufc31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\36\1\44\1\37\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\2\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\60\1\61"+
    "\1\52\1\53\2\0\1\74\10\0\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\16\0\1\112\3\0\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\2\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\1\151\1\152\1\153\1\154\1\155"+
    "\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165"+
    "\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175"+
    "\1\176\1\177\1\200\1\201\1\202\1\203\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\303\0\303\0\u0104\0\u0145"+
    "\0\303\0\u0186\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\u01c7\0\u0208\0\303\0\303\0\303\0\u0249\0\303"+
    "\0\303\0\u028a\0\u02cb\0\303\0\303\0\303\0\303\0\u030c"+
    "\0\u034d\0\303\0\303\0\u038e\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\u03cf\0\u0410\0\303"+
    "\0\303\0\303\0\303\0\u0451\0\u0492\0\303\0\303\0\303"+
    "\0\202\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\u04d3\0\u0514\0\u0555\0\u0596\0\303\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\u07df\0\u0820\0\u0861\0\u08a2"+
    "\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\303\0\u0b6d\0\u0bae\0\u0bef\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\16\1\76\1\77\1\100\1\101"+
    "\1\102\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\103\1\104\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\16\1\76\1\77\1\100"+
    "\1\101\1\102\53\0\1\105\1\106\127\0\2\107\1\0"+
    "\2\107\2\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\2\0\3\107\2\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\1\107\1\0\1\107\1\0\1\107\1\0"+
    "\1\107\1\0\1\107\2\0\1\107\1\0\2\107\1\0"+
    "\1\107\1\0\1\107\12\0\1\110\1\111\1\112\1\113"+
    "\75\0\1\114\1\115\1\116\1\117\103\0\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\73\0\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\56\0\2\134\1\0\2\134\2\0"+
    "\1\134\1\0\1\134\1\0\1\134\1\0\1\134\1\0"+
    "\1\134\1\0\1\134\1\0\1\134\1\0\1\134\1\0"+
    "\1\134\1\0\1\134\1\0\1\134\1\0\1\134\2\0"+
    "\3\134\2\0\1\134\1\0\1\134\1\0\1\134\1\0"+
    "\1\134\1\0\1\134\1\0\1\134\1\0\1\134\1\0"+
    "\1\134\2\0\1\134\1\0\2\134\1\0\1\134\1\0"+
    "\1\134\12\0\1\135\1\136\1\137\1\140\75\0\1\141"+
    "\1\142\1\143\1\144\75\0\1\145\1\146\1\147\1\150"+
    "\75\0\1\141\1\142\1\151\1\152\66\0\2\153\1\0"+
    "\2\153\2\0\1\153\1\0\1\153\1\0\1\153\1\0"+
    "\1\153\1\0\1\153\1\0\1\153\1\0\1\153\1\0"+
    "\1\153\1\0\1\153\1\0\1\153\1\0\1\153\1\0"+
    "\1\153\2\0\3\153\2\0\1\153\1\0\1\153\1\0"+
    "\1\153\1\0\1\153\1\0\1\153\1\0\1\153\1\0"+
    "\1\153\1\0\1\153\2\0\1\153\1\0\2\153\1\0"+
    "\1\153\1\0\1\153\56\0\1\154\1\155\77\0\2\156"+
    "\33\0\1\157\1\160\1\161\1\162\75\0\1\163\1\164"+
    "\1\165\1\166\141\0\1\167\1\170\77\0\2\171\77\0"+
    "\1\172\1\173\77\0\2\174\22\0\1\175\1\176\1\175"+
    "\1\176\1\175\14\176\4\175\14\176\2\175\3\176\3\175"+
    "\4\176\2\175\6\176\5\175\2\176\3\175\2\176\1\177"+
    "\1\200\1\177\1\200\1\177\14\200\4\177\14\200\2\177"+
    "\3\200\3\177\4\200\2\177\6\200\5\177\2\200\3\177"+
    "\2\200\1\201\1\202\1\201\1\202\1\201\14\202\4\201"+
    "\14\202\2\201\3\202\3\201\4\202\2\201\6\202\5\201"+
    "\2\202\3\201\2\202\1\201\1\203\1\201\1\203\1\201"+
    "\14\203\4\201\14\203\2\201\3\203\3\201\4\203\2\201"+
    "\6\203\5\201\2\203\3\201\2\203\1\204\1\205\1\204"+
    "\1\205\1\204\14\205\4\204\14\205\2\204\3\205\3\204"+
    "\4\205\2\204\6\205\5\204\2\205\3\204\2\205\1\206"+
    "\1\207\1\206\1\207\1\206\14\207\4\206\14\207\2\206"+
    "\3\207\3\206\4\207\2\206\6\207\5\206\2\207\3\206"+
    "\2\207\1\210\1\211\1\210\1\211\1\210\14\211\4\210"+
    "\14\211\2\210\3\211\3\210\4\211\2\210\6\211\5\210"+
    "\2\211\3\210\2\211\1\212\1\213\1\212\1\213\1\212"+
    "\14\213\4\212\14\213\2\212\3\213\3\212\4\213\2\212"+
    "\6\213\5\212\2\213\3\212\2\213\1\214\1\215\1\214"+
    "\1\215\1\214\14\215\4\214\14\215\2\214\3\215\3\214"+
    "\4\215\2\214\6\215\5\214\2\215\3\214\2\215\1\216"+
    "\1\217\1\216\1\217\1\216\14\217\4\216\14\217\2\216"+
    "\3\217\3\216\4\217\2\216\6\217\5\216\2\217\3\216"+
    "\2\217\1\220\1\221\1\220\1\221\1\220\14\221\4\220"+
    "\14\221\2\220\3\221\3\220\4\221\2\220\6\221\5\220"+
    "\2\221\3\220\2\221\1\220\1\222\1\220\1\222\1\220"+
    "\14\222\4\220\14\222\2\220\3\222\3\220\4\222\2\220"+
    "\6\222\5\220\2\222\3\220\2\222\1\223\1\224\1\223"+
    "\1\224\1\223\14\224\4\223\14\224\2\223\3\224\3\223"+
    "\4\224\2\223\6\224\5\223\2\224\3\223\2\224\1\225"+
    "\1\226\1\225\1\226\1\225\14\226\4\225\14\226\2\225"+
    "\3\226\3\225\4\226\2\225\6\226\5\225\2\226\3\225"+
    "\2\226\1\227\1\230\1\227\1\230\1\227\14\230\4\227"+
    "\14\230\2\227\3\230\3\227\4\230\2\227\6\230\5\227"+
    "\2\230\3\227\2\230\1\231\1\232\1\231\1\232\1\231"+
    "\14\232\4\231\14\232\2\231\3\232\3\231\4\232\2\231"+
    "\6\232\5\231\2\232\3\231\2\232\1\233\1\234\1\233"+
    "\1\234\1\233\14\234\4\233\14\234\2\233\3\234\3\233"+
    "\4\234\2\233\6\234\5\233\2\234\3\233\2\234\1\235"+
    "\1\236\1\235\1\236\1\235\14\236\4\235\14\236\2\235"+
    "\3\236\3\235\4\236\2\235\6\236\5\235\2\236\3\235"+
    "\2\236\1\237\1\240\1\237\1\240\1\237\14\240\4\237"+
    "\14\240\2\237\3\240\3\237\4\240\2\237\6\240\5\237"+
    "\2\240\3\237\2\240\1\241\1\242\1\241\1\242\1\241"+
    "\14\242\4\241\14\242\2\241\3\242\3\241\4\242\2\241"+
    "\6\242\5\241\2\242\3\241\2\242\1\243\1\244\1\243"+
    "\1\244\1\243\14\244\4\243\14\244\2\243\3\244\3\243"+
    "\4\244\2\243\6\244\5\243\2\244\3\243\2\244\1\245"+
    "\1\246\1\245\1\246\1\245\14\246\4\245\14\246\2\245"+
    "\3\246\3\245\4\246\2\245\6\246\5\245\2\246\3\245"+
    "\2\246\1\247\65\0\1\247\12\0\1\250\65\0\1\250"+
    "\12\0\1\251\65\0\1\251\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3120];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\3\11\2\1\1\11\1\1\7\11\2\1"+
    "\3\11\1\1\2\11\2\1\4\11\2\1\2\11\1\1"+
    "\11\11\2\1\4\11\2\1\3\11\1\1\11\11\2\1"+
    "\2\0\1\11\10\0\15\11\16\0\1\11\3\0\10\11"+
    "\3\1\60\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private String stress_a;
    private String stress_A;
    private String stress_e;
    private String stress_E;
    private String stress_i;
    private String stress_I;
    private String stress_o;
    private String stress_O;
    private String stress_u;
    private String stress_U;
    private String stress_y;
    private String stress_Y;

    private String diair_i;
    private String diair_I;
    private String diair_y;
    private String diair_Y;

    /**
     * Set whether the result should include stressed characters.
     */
    private void outputStressed(boolean stressed) {
	if (stressed) {
	    stress_a = "\u00e1";
	    stress_A = "\u00c1";
	    stress_e = "\u00e9";
	    stress_E = "\u00c9";
	    stress_i = "\u00ed";
	    stress_I = "\u00cd";
	    stress_o = "\u00f3";
	    stress_O = "\u00d3";
	    stress_u = "\u00fa";
	    stress_U = "\u00da";
	    stress_y = "\u00fd";
	    stress_Y = "\u00dd";

	    diair_i = "\u00ef";
	    diair_I = "\u00cf";
	    diair_y = "\u00ff";
	    diair_Y = "\u0178";
	} else {
	    stress_a = "a";
	    stress_A = "A";
	    stress_e = "e";
	    stress_E = "E";
	    stress_i = "i";
	    stress_I = "I";
	    stress_o = "o";
	    stress_O = "O";
	    stress_u = "u";
	    stress_U = "U";
	    stress_y = "y";
	    stress_Y = "Y";

	    diair_i = "i";
	    diair_I = "I";
	    diair_y = "y";
	    diair_Y = "Y";
	}
    }

    /**
     * Transcribe and print on the standard output the specified input file.
     */
    public static void main(String [] args) {
        if (args.length != 2) {
            System.err.println("Usage: CharCount file encoding");
            System.exit(1);
        }

        // Open file
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(new FileInputStream(args[0]), args[1]));
        } catch (FileNotFoundException e) {
            System.err.println("Unable to open file " + args[0] + ": " + e.getMessage());
            System.exit(1);
        } catch (UnsupportedEncodingException e) {
            System.err.println("Unsupported encoding " + args[1] + ": " + e.getMessage());
        }

	GreekTranscribe gt = new GreekTranscribe(in);
	String s;
	try {
	    while ((s = gt.transcribe()) != null)
		System.out.print(s);
	    in.close();
	} catch (IOException e) {
            System.err.println("Input  output exception: " + e.getMessage());
        }
    }

    /**
     * Convenience method that returns the passed string transcribed.
     */
    public static String string(String in) {
	GreekTranscribe gt = new GreekTranscribe(new StringReader(in));
	StringBuilder result = new StringBuilder();
	try {
	    String s;
	    while ((s = gt.transcribe()) != null)
		result.append(s);
	} catch (IOException e) {
            return null;
        }
	return result.toString();
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GreekTranscribe(java.io.Reader in) {
      outputStressed(false);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GreekTranscribe(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String transcribe() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return stress_A;
          }
        case 133: break;
        case 58: 
          { return "f";
          }
        case 134: break;
        case 59: 
          { return "F";
          }
        case 135: break;
        case 92: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_a + "f";
          }
        case 136: break;
        case 3: 
          { return "ps";
          }
        case 137: break;
        case 20: 
          { return "ch";
          }
        case 138: break;
        case 88: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "af";
          }
        case 139: break;
        case 24: 
          { return "e";
          }
        case 140: break;
        case 90: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "aF";
          }
        case 141: break;
        case 25: 
          { return "E";
          }
        case 142: break;
        case 57: 
          { return diair_Y;
          }
        case 143: break;
        case 22: 
          { return "d";
          }
        case 144: break;
        case 23: 
          { return "D";
          }
        case 145: break;
        case 99: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_A + "f";
          }
        case 146: break;
        case 101: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_A + "F";
          }
        case 147: break;
        case 79: 
          { return "Ou";
          }
        case 148: break;
        case 80: 
          { return "OU";
          }
        case 149: break;
        case 13: 
          { return stress_Y;
          }
        case 150: break;
        case 131: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "b";
          }
        case 151: break;
        case 83: 
          { return "b";
          }
        case 152: break;
        case 132: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "B";
          }
        case 153: break;
        case 84: 
          { return "B";
          }
        case 154: break;
        case 103: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "ef";
          }
        case 155: break;
        case 105: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "eF";
          }
        case 156: break;
        case 26: 
          { return stress_e;
          }
        case 157: break;
        case 6: 
          { return "a";
          }
        case 158: break;
        case 93: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_a + "v"; /* Note 10 */
          }
        case 159: break;
        case 65: 
          { return "nch";
          }
        case 160: break;
        case 8: 
          { return "A";
          }
        case 161: break;
        case 5: 
          { return "PS";
          }
        case 162: break;
        case 21: 
          { return "CH";
          }
        case 163: break;
        case 95: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "Af";
          }
        case 164: break;
        case 71: 
          { return "Nch";
          }
        case 165: break;
        case 97: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "AF";
          }
        case 166: break;
        case 81: 
          { return "O" + stress_u;
          }
        case 167: break;
        case 118: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "if";
          }
        case 168: break;
        case 120: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "iF";
          }
        case 169: break;
        case 123: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_i + "v"; /* Note 10 */
          }
        case 170: break;
        case 110: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "Ef";
          }
        case 171: break;
        case 112: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "EF";
          }
        case 172: break;
        case 125: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_i + "V";
          }
        case 173: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return "Ch"; /* Note 11 */
          }
        case 174: break;
        case 66: 
          { return "nCH";
          }
        case 175: break;
        case 61: 
          { return "ng";
          }
        case 176: break;
        case 27: 
          { return stress_E;
          }
        case 177: break;
        case 62: 
          { return "nG";
          }
        case 178: break;
        case 72: 
          { return "NCH";
          }
        case 179: break;
        case 127: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_I + "v";
          }
        case 180: break;
        case 28: 
          { return "z";
          }
        case 181: break;
        case 129: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_I + "V";
          }
        case 182: break;
        case 29: 
          { return "Z";
          }
        case 183: break;
        case 10: 
          { return "y";
          }
        case 184: break;
        case 82: 
          { return "O" + stress_U;
          }
        case 185: break;
        case 11: 
          { return "Y";
          }
        case 186: break;
        case 109: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_e + "V";
          }
        case 187: break;
        case 18: 
          { return "x";
          }
        case 188: break;
        case 19: 
          { return "X";
          }
        case 189: break;
        case 36: 
          { return diair_i;
          }
        case 190: break;
        case 35: 
          { return "th";
          }
        case 191: break;
        case 1: 
          { return yytext();
          }
        case 192: break;
        case 115: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_E + "v";
          }
        case 193: break;
        case 117: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_E + "V";
          }
        case 194: break;
        case 77: 
          { return "o" + stress_u;
          }
        case 195: break;
        case 14: 
          { return "v";
          }
        case 196: break;
        case 15: 
          { return "V";
          }
        case 197: break;
        case 32: 
          { return stress_i;
          }
        case 198: break;
        case 67: 
          { return "Ng";
          }
        case 199: break;
        case 68: 
          { return "NG";
          }
        case 200: break;
        case 94: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_a + "V";
          }
        case 201: break;
        case 89: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "av";
          }
        case 202: break;
        case 4: 
          { return stress_o;
          }
        case 203: break;
        case 91: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "aV";
          }
        case 204: break;
        case 54: 
          { return "t";
          }
        case 205: break;
        case 55: 
          { return "T";
          }
        case 206: break;
        case 60: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return "Ps"; /* Note 11 */
          }
        case 207: break;
        case 100: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_A + "v";
          }
        case 208: break;
        case 102: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_A + "V";
          }
        case 209: break;
        case 52: 
          { return "s";
          }
        case 210: break;
        case 53: 
          { return "S";
          }
        case 211: break;
        case 50: 
          { return "r";
          }
        case 212: break;
        case 51: 
          { return "R";
          }
        case 213: break;
        case 104: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "ev";
          }
        case 214: break;
        case 34: 
          { return "TH";
          }
        case 215: break;
        case 106: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "eV";
          }
        case 216: break;
        case 37: 
          { return diair_I;
          }
        case 217: break;
        case 78: 
          { return "o" + stress_U;
          }
        case 218: break;
        case 44: 
          { return "p";
          }
        case 219: break;
        case 96: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "Av";
          }
        case 220: break;
        case 45: 
          { return "P";
          }
        case 221: break;
        case 98: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "AV";
          }
        case 222: break;
        case 33: 
          { return stress_I;
          }
        case 223: break;
        case 48: 
          { return "o";
          }
        case 224: break;
        case 108: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_e + "v"; /* Note 10 */
          }
        case 225: break;
        case 2: 
          { return stress_O;
          }
        case 226: break;
        case 49: 
          { return "O";
          }
        case 227: break;
        case 119: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "iv";
          }
        case 228: break;
        case 85: 
          { return yytext() + "b"; /* Note 5 */
          }
        case 229: break;
        case 121: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "iV";
          }
        case 230: break;
        case 46: 
          { return "n";
          }
        case 231: break;
        case 47: 
          { return "N";
          }
        case 232: break;
        case 86: 
          { return yytext() + "b";
          }
        case 233: break;
        case 87: 
          { return yytext() + "B";
          }
        case 234: break;
        case 42: 
          { return "m";
          }
        case 235: break;
        case 43: 
          { return "M";
          }
        case 236: break;
        case 130: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "b"; /* Note 7 */
          }
        case 237: break;
        case 111: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "Ev";
          }
        case 238: break;
        case 113: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return "EV";
          }
        case 239: break;
        case 7: 
          { return stress_a;
          }
        case 240: break;
        case 122: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_i + "f";
          }
        case 241: break;
        case 63: 
          { return "nx";
          }
        case 242: break;
        case 124: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_i + "F";
          }
        case 243: break;
        case 40: 
          { return "l";
          }
        case 244: break;
        case 64: 
          { return "nX";
          }
        case 245: break;
        case 41: 
          { return "L";
          }
        case 246: break;
        case 38: 
          { return "k";
          }
        case 247: break;
        case 39: 
          { return "K";
          }
        case 248: break;
        case 56: 
          { return diair_y;
          }
        case 249: break;
        case 126: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_I + "f";
          }
        case 250: break;
        case 128: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_I + "F";
          }
        case 251: break;
        case 30: 
          { return "i";
          }
        case 252: break;
        case 12: 
          { return stress_y;
          }
        case 253: break;
        case 107: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_e + "f";
          }
        case 254: break;
        case 31: 
          { return "I";
          }
        case 255: break;
        case 75: 
          { return "ou";
          }
        case 256: break;
        case 74: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return "Th"; /* Note 11 */
          }
        case 257: break;
        case 76: 
          { return "oU";
          }
        case 258: break;
        case 16: 
          { return "g";
          }
        case 259: break;
        case 69: 
          { return "Nx";
          }
        case 260: break;
        case 70: 
          { return "NX";
          }
        case 261: break;
        case 17: 
          { return "G";
          }
        case 262: break;
        case 114: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_E + "f";
          }
        case 263: break;
        case 116: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return stress_E + "F";
          }
        case 264: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
